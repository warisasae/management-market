// controllers/authController.js
import { PrismaClient } from '@prisma/client'; // üëà Import ‡∏ï‡∏±‡∏ß Client ‡∏´‡∏•‡∏±‡∏Å‡∏°‡∏≤‡πÅ‡∏ó‡∏ô
import bcrypt from "bcrypt";

/**
 * @description ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö (login)
 */
export async function login(req, res, next) {
    const { username, password } = req.body || {};

    // 1. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
    if (!username || !password) {
        return res.status(400).json({ error: "Username and password are required" });
    }

    let prisma; // ‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£ prisma ‡πÑ‡∏ß‡πâ‡∏Ç‡πâ‡∏≤‡∏á‡∏ô‡∏≠‡∏Å try/catch

    try {
        // ‚¨áÔ∏è === ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÇ‡∏Ñ‡πâ‡∏î Debug === ‚¨áÔ∏è
        console.log('[DEBUG AUTH] DATABASE_URL before query:', process.env.DATABASE_URL);
        prisma = new PrismaClient(); // üëà ‡∏™‡∏£‡πâ‡∏≤‡∏á Client ‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà Login
        // ‚¨ÜÔ∏è ===================== ‚¨ÜÔ∏è

        // 2. ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        const user = await prisma.user.findUnique({ where: { username } });

        if (!user) {
            console.warn("[login] user not found:", username);
            // ‚≠êÔ∏è Correction: ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° Error ‡∏Å‡∏•‡∏≤‡∏á‡πÜ ‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì Comment ‡πÑ‡∏ß‡πâ
            return res.status(401).json({ error: "Invalid username or password" }); 
        }

        // 3. üîë ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô (‡πÉ‡∏ä‡πâ bcrypt.compare) üîë
        const isPasswordValid = await bcrypt.compare(password, user.password);

        if (!isPasswordValid) {
            console.warn("[login] bad password for:", username);
             // ‚≠êÔ∏è Correction: ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° Error ‡∏Å‡∏•‡∏≤‡∏á‡πÜ
            return res.status(401).json({ error: "Invalid username or password" });
        }

        // 4. ‡∏™‡∏£‡πâ‡∏≤‡∏á Session ‡πÅ‡∏•‡∏∞‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö
        const sessionUser = {
            user_id: user.user_id,
            username: user.username,
            name: user.name,
            role: user.role,
            image_url: user.image_url ?? null,
        };
        req.session.user = sessionUser;
        console.log("[Login] Session created/updated:", req.session.user); // Log ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á Session

        const { password: _, ...userData } = user;
        return res.json({ ok: true, user: userData });

    } catch (e) {
        console.error("[Login Error]", e); // Log error ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡∏∂‡πâ‡∏ô
        // ‡∏™‡πà‡∏á‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡∏¢‡∏±‡∏á Error Handler ‡∏Å‡∏•‡∏≤‡∏á (‡πÉ‡∏ô app.js)
        next(e);
    } finally {
        // ‚¨áÔ∏è === ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÇ‡∏Ñ‡πâ‡∏î Debug === ‚¨áÔ∏è
        // ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Prisma ‡πÄ‡∏™‡∏°‡∏≠ ‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏à‡∏∞‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏´‡∏£‡∏∑‡∏≠‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß
        if (prisma) {
            await prisma.$disconnect();
            console.log("[DEBUG AUTH] Prisma disconnected.");
        }
        // ‚¨ÜÔ∏è ===================== ‚¨ÜÔ∏è
    }
}

// ----------------------------------------------------------------------
// ‡πÇ‡∏Ñ‡πâ‡∏î‡∏™‡πà‡∏ß‡∏ô logout ‡πÅ‡∏•‡∏∞ me (‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç)
// ----------------------------------------------------------------------

/**
 * @description ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö (logout)
 */
export async function logout(req, res, next) { // ‡πÄ‡∏û‡∏¥‡πà‡∏° next ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö error handling
    try {
        req.session.destroy((err) => {
            if (err) {
                 console.error("[Logout Session Error]", err);
                 // ‡∏™‡πà‡∏á‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡∏¢‡∏±‡∏á Error Handler ‡∏Å‡∏•‡∏≤‡∏á ‡πÅ‡∏ó‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏≠‡∏á
                 return next(new Error("Failed to destroy session")); 
            }
            res.clearCookie("sid", { path: "/" }); // ‡∏•‡∏ö session cookie (‡∏ä‡∏∑‡πà‡∏≠ sid ‡∏ï‡∏≤‡∏°‡∏Ñ‡πà‡∏≤ default)
            // res.clearCookie("authToken", { path: "/" }); // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏Ñ‡∏¢‡πÉ‡∏ä‡πâ authToken cookie
            console.log("[Logout] Session destroyed and cookie cleared.");
            return res.json({ ok: true });
        });
    } catch (e) {
        // Catch ‡∏ô‡∏µ‡πâ‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡πÑ‡∏°‡πà‡∏Ñ‡πà‡∏≠‡∏¢‡πÑ‡∏î‡πâ‡πÉ‡∏ä‡πâ ‡πÄ‡∏û‡∏£‡∏≤‡∏∞ destroy ‡πÄ‡∏õ‡πá‡∏ô callback
        console.error("[Logout General Error]", e);
        res.clearCookie("sid", { path: "/" });
        // ‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏Å‡πà‡∏≠‡∏ô ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ client ‡∏Ñ‡πâ‡∏≤‡∏á
        return res.json({ ok: true }); 
    }
}

/**
 * @description ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤ user ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô session ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
 */
export async function me(req, res) {
    const user = req.session?.user || null;
     console.log("[Me Check] Current session user:", user); // Log ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π session
    return res.json({ user });
}
