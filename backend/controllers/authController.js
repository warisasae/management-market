import { prisma } from "../config/prisma.js";
import bcrypt from "bcrypt";

/**
 * @description ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö (login)
 */
export async function login(req, res, next) {
    try {
        const { username, password } = req.body || {};
        
        // 1. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
        if (!username || !password) {
            return res.status(400).json({ error: "Username and password are required" });
        }

        // 2. ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        const user = await prisma.user.findUnique({ where: { username } });

        if (!user) {
            console.warn("[login] user not found:", username);
            // ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢ ‡πÑ‡∏°‡πà‡∏Ñ‡∏ß‡∏£‡∏ö‡∏≠‡∏Å‡∏ß‡πà‡∏≤‡πÑ‡∏°‡πà‡∏û‡∏ö username ‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏ú‡∏¥‡∏î ‡πÉ‡∏´‡πâ‡∏ï‡∏≠‡∏ö‡∏£‡∏ß‡∏°‡πÜ ‡πÑ‡∏õ
            return res.status(401).json({ error: "Invalid username or password" }); 
        }

        // 3. üîë ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏•‡∏∞‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢ (‡πÉ‡∏ä‡πâ bcrypt.compare) üîë
        // ‡∏ô‡∏≥‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏õ‡πâ‡∏≠‡∏ô (plain text) ‡∏°‡∏≤‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏Å‡∏±‡∏ö‡∏£‡∏´‡∏±‡∏™ Hash ‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        const isPasswordValid = await bcrypt.compare(password, user.password);

        if (!isPasswordValid) {
            console.warn("[login] bad password for:", username);
            return res.status(401).json({ error: "Invalid username or password" });
        }

        // 4. ‡∏™‡∏£‡πâ‡∏≤‡∏á Session/Token ‡πÅ‡∏•‡∏∞‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö
        
        // ‡∏™‡∏£‡πâ‡∏≤‡∏á sessionUser
        const sessionUser = {
            user_id: user.user_id,
            username: user.username,
            name: user.name,
            role: user.role,
            image_url: user.image_url ?? null,
        };
        req.session.user = sessionUser;

        // ‡πÄ‡∏ã‡πá‡∏ï token ‡∏•‡∏á‡πÉ‡∏ô cookie
        const token = "your_generated_token_here"; // ‡∏Ñ‡∏ß‡∏£‡πÉ‡∏ä‡πâ JWT ‡∏´‡∏£‡∏∑‡∏≠ Library ‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á Token ‡∏à‡∏£‡∏¥‡∏á
        res.cookie("authToken", token, {
            httpOnly: true, // ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏à‡∏≤‡∏Å JS
            secure: process.env.NODE_ENV === "production", // ‡πÉ‡∏ä‡πâ secure ‡∏ñ‡πâ‡∏≤‡πÉ‡∏ä‡πâ HTTPS
            sameSite: "lax", // ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô CSRF
            maxAge: 7 * 24 * 60 * 60 * 1000, // ‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤ 7 ‡∏ß‡∏±‡∏ô
        });

        return res.json({ ok: true, user: sessionUser });
    } catch (e) {
        next(e);
    }
}

// ----------------------------------------------------------------------
// ‡πÇ‡∏Ñ‡πâ‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡πÉ‡∏´‡πâ‡∏°‡∏≤ (‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç)
// ----------------------------------------------------------------------

/**
 * @description ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö (logout)
 */
export async function logout(req, res) {
    try {
        req.session.destroy((err) => {
            if (err) return res.status(500).json({ error: "Failed to destroy session" });
            // ‡∏•‡∏ö token ‡πÉ‡∏ô client
            res.clearCookie("authToken", { path: "/" }); // ‡∏•‡∏ö‡∏à‡∏≤‡∏Å cookie
            // localStorage.removeItem('authToken'); // ‡∏´‡∏≤‡∏Å‡πÉ‡∏ä‡πâ LocalStorage ‡∏Ñ‡∏ß‡∏£‡∏•‡∏ö‡∏î‡πâ‡∏ß‡∏¢
            return res.json({ ok: true });
        });
    } catch (e) {
        console.error(e);
        res.clearCookie("authToken", { path: "/" });
        return res.json({ ok: true });
    }
}

/**
 * @description ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤ user ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô session ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
 */
export async function me(req, res) {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö session ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡∏≠‡∏¢‡∏π‡πà
    const user = req.session?.user || null;
    return res.json({ user });
}