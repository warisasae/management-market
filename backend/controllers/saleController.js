// controllers/salesController.js
import { prisma } from '../config/prisma.js';
import { genId } from '../utils/id.js';

const asNum = (v, name) => {
  const n = Number(v);
  if (!Number.isFinite(n)) throw new Error(`${name} must be a number`);
  return n;
};

export async function createSale(req, res, next) {
  try {
    const {
      items = [],
      user_id: bodyUserId,
      payment_method,
      cash_received,
      vat_rate = 0,   // % (‡πÄ‡∏ä‡πà‡∏ô 7 = 7%)
    } = req.body;

    if (!Array.isArray(items) || items.length === 0) {
      return res.status(400).json({ error: "items required" });
    }

    const actorId = req.user?.user_id || bodyUserId || null;

    // üëâ ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏¢‡∏≠‡∏î‡∏à‡∏≤‡∏Å items ‡πÄ‡∏≠‡∏á‡πÄ‡∏™‡∏°‡∏≠
    const sub_total_calc = items.reduce((sum, it) => {
      const qty = Number(it.quantity) || 0;
      const price = Number(it.price) || 0;
      return sum + qty * price;
    }, 0);

    const vat_amount_calc   = +(sub_total_calc * (Number(vat_rate) / 100)).toFixed(2);
    const grand_total_calc  = +(sub_total_calc + vat_amount_calc).toFixed(2);

    const sale_id = await prisma.$transaction(async (tx) => {
      // 1) ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡∏±‡∏ß‡∏ö‡∏¥‡∏•‡∏î‡πâ‡∏ß‡∏¢‡∏¢‡∏≠‡∏î‡∏ó‡∏µ‡πà‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÅ‡∏•‡πâ‡∏ß
      await tx.sale.create({
        data: {
          sale_id: await genId({
            client: tx,
            model: "sale",
            field: "sale_id",
            prefix: "SL",
            pad: 5,
          }),
          user_id: actorId,
          payment_method,
          cash_received,
          vat_rate: Number(vat_rate) || 0,
          sub_total: sub_total_calc,
          vat_amount: vat_amount_calc,
          grand_total: grand_total_calc,
        },
      });

      // ‡∏≠‡πà‡∏≤‡∏ô sale_id ‡∏ó‡∏µ‡πà‡πÄ‡∏û‡∏¥‡πà‡∏á gen (‡∏´‡∏£‡∏∑‡∏≠‡∏Ñ‡∏∏‡∏ì‡∏à‡∏∞‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ß‡πâ‡∏à‡∏≤‡∏Å genId ‡∏Å‡πá‡πÑ‡∏î‡πâ)
      // ‡πÅ‡∏ï‡πà‡πÉ‡∏ô‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πâ‡πÄ‡∏£‡∏≤‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏ï‡∏≠‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô ‡∏î‡∏∂‡∏á‡∏à‡∏≤‡∏Å‡∏ö‡∏¥‡∏•‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏ó‡∏µ‡πà user ‡∏ô‡∏µ‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡πá‡πÑ‡∏î‡πâ
      // ‡∏á‡πà‡∏≤‡∏¢‡∏™‡∏∏‡∏î: ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡πà‡∏≠‡∏ô‡πÅ‡∏•‡πâ‡∏ß "‡∏à‡∏≥‡∏Ñ‡πà‡∏≤" ‡∏à‡∏≤‡∏Å genId
      const created = await tx.sale.findFirst({
        orderBy: { created_at: 'desc' },
        select: { sale_id: true },
      });
      const sid = created.sale_id;

      // 2) ‡∏•‡∏π‡∏õ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ + ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å total ‡∏Ç‡∏≠‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ + ‡∏ï‡∏±‡∏î‡∏™‡∏ï‡πä‡∏≠‡∏Å + ‡∏™‡∏£‡πâ‡∏≤‡∏á stockTransaction
      for (const it of items) {
        const qty   = Number(it.quantity) || 0;
        const price = Number(it.price) || 0;
        const lineTotal = +(qty * price).toFixed(2);

        await tx.saleItem.create({
          data: {
            sale_id: sid,
            product_id: it.product_id,
            quantity: qty,
            price,
            total: lineTotal,       // ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°‡∏Ç‡∏≠‡∏á‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î
          },
        });

        // ‡∏ï‡∏±‡∏î‡∏™‡∏ï‡πä‡∏≠‡∏Å
        const prod = await tx.product.findUnique({
          where: { product_id: it.product_id },
          select: { stock_qty: true, status: true },
        });
        if (!prod) throw new Error("product_not_found");
        if (prod.stock_qty - qty < 0) throw new Error("insufficient_stock");

        const newQty = prod.stock_qty - qty;
        const newStatus = newQty <= 0 ? "OUT_OF_STOCK" : "AVAILABLE";
        await tx.product.update({
          where: { product_id: it.product_id },
          data: { stock_qty: newQty, status: newStatus },
        });

        // ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏™‡∏ï‡πä‡∏≠‡∏Å (OUT)
        await tx.stockTransaction.create({
          data: {
            stock_id: await genId({
              client: tx,
              model: "stockTransaction",
              field: "stock_id",
              prefix: "ST",
              pad: 3,
            }),
            product_id: it.product_id,
            change_type: "OUT",
            quantity: -Math.abs(qty),
            note: `sale ${sid}`,
            user_id: actorId,
          },
        });
      }

      return created.sale_id;
    });

    // ‡∏™‡πà‡∏á‡∏Å‡∏•‡∏±‡∏ö‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• user
    const full = await prisma.sale.findUnique({
      where: { sale_id },
      include: { user: { select: { user_id: true, username: true, name: true } } },
    });

    res.status(201).json(full);
  } catch (e) {
    if (e.message === "product_not_found") {
      return res.status(404).json({ error: "product not found" });
    }
    if (e.message === "insufficient_stock") {
      return res.status(400).json({ error: "Not enough stock" });
    }
    next(e);
  }
}

// GET /api/sales  ‚Äî ‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
export async function listSales(req, res, next) {
  try {
    const rows = await prisma.sale.findMany({
      orderBy: { created_at: 'desc' },   // ‚úÖ ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏à‡∏≤‡∏Å sale_date ‚Üí created_at
      take: 100,
      include: { user: true }
    });
    res.json(rows);
  } catch (e) { next(e); }
}

// GET /api/sales/:id ‚Äî ‡∏î‡∏π‡∏ö‡∏¥‡∏•‡∏Ç‡∏≤‡∏¢ + ‡πÑ‡∏≠‡πÄ‡∏ó‡πá‡∏° (‡πÅ‡∏Å‡πâ‡πÉ‡∏´‡πâ‡πÑ‡∏°‡πà select field ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ)
export async function getSale(req, res, next) {
  try {
    const sale = await prisma.sale.findUnique({
      where: { sale_id: req.params.id },
      include: {
        user: { select: { user_id: true, username: true, name: true } },
        items: {
          include: {
            product: true,   // ‚úÖ ‡πÄ‡∏≠‡∏≤‡∏°‡∏≤‡∏ó‡∏±‡πâ‡∏á object ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô select ‡∏ü‡∏¥‡∏•‡∏î‡πå‡∏ú‡∏¥‡∏î
          },
        },
      },
    });

    if (!sale) return res.status(404).json({ error: "sale not found" });
    res.json(sale);
  } catch (e) { next(e); }
}

// controllers/saleController.js
export async function listSalesWithItems(req, res, next) {
  try {
    const sales = await prisma.sale.findMany({
  orderBy: { created_at: 'desc' },
  select: {
    sale_id: true,
    created_at: true,
    grand_total: true,
    items: {
      select: {
        sale_item_id: true,
        price: true,
        quantity: true,   // ‚úÖ ‡πÉ‡∏ä‡πâ‡∏≠‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡πÅ‡∏ó‡∏ô
        total: true,
        product: {
          select: {
            product_id: true,
            product_name: true,
            unit: true,
            barcode: true,
            sell_price: true,
            cost_price: true,
            category: { select: { category_name: true } }
          }
        }
      }
    }
  }
});

    res.json(sales);
  } catch (err) {
    console.error('Error fetching sales data:', err);
    res.status(500).json({ error: err.message });
  }
}