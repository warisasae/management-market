// controllers/userController.js
import { prisma } from '../config/prisma.js';
import { genId } from '../utils/id.js';
import bcrypt from 'bcrypt';

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ä‡πà‡∏ß‡∏¢: map error Prisma ‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞/‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏≠‡πà‡∏≤‡∏ô‡∏á‡πà‡∏≤‡∏¢
function handlePrismaError(e, res, next) {
    if (e?.code === 'P2002') {
        // unique constraint (‡πÄ‡∏ä‡πà‡∏ô username ‡∏ã‡πâ‡∏≥)
        return res.status(409).json({ error: 'unique constraint violated', code: 'P2002', fields: e.meta?.target });
    }
    if (e?.code === 'P2025') {
        // not found
        return res.status(404).json({ error: 'record not found', code: 'P2025' });
    }
    next(e);
}

// POST /api/users
export async function createUser(req, res, next) {
    try {
        const { username, password, name, role = 'USER', image_url } = req.body;
        if (!username || !password || !name)
            return res.status(400).json({ error: 'username, password, name are required' });

        // üîë ‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ó‡∏µ‡πà‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç: HASH ‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
        const hashedPassword = await bcrypt.hash(password, 10); // 10 ‡∏Ñ‡∏∑‡∏≠ Salt Rounds ‡∏ó‡∏µ‡πà‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥
        
        const user_id = await genId({ model: 'user', field: 'user_id', prefix: 'US', pad: 3 });

        const created = await prisma.user.create({
            data: { 
                user_id, 
                username, 
                password: hashedPassword, // ‡πÉ‡∏ä‡πâ‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏ó‡∏µ‡πà Hash ‡πÅ‡∏•‡πâ‡∏ß
                name, 
                role, 
                image_url: image_url || null 
            },
            select: { user_id: true, username: true, name: true, role: true, image_url: true }
        });

        res.status(201).json(created);
    } catch (e) { handlePrismaError(e, res, next); }
}

// GET /api/users
export async function getAllUsers(req, res, next) {
    try {
        const rows = await prisma.user.findMany({
            orderBy: { username: 'asc' },
            select: { user_id: true, username: true, name: true, role: true, image_url: true }
        });
        res.json(rows);
    } catch (e) { next(e); }
}

// GET /api/users/:id
export async function getUser(req, res, next) {
    try {
        const row = await prisma.user.findUnique({
            where: { user_id: req.params.id },
            select: { user_id: true, username: true, name: true, role: true, image_url: true }
        });
        if (!row) return res.status(404).json({ error: 'user not found' });
        res.json(row);
    } catch (e) { next(e); }
}

/**
 * PUT /api/users/:id
 * ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ (name, role, image_url)
 */
export async function updateUser(req, res, next) {
    try {
        const { name, role, image_url } = req.body;

        const updated = await prisma.user.update({
            where: { user_id: req.params.id },
            data: {
                ...(name !== undefined ? { name } : {}),
                ...(role !== undefined ? { role } : {}),
                ...(image_url !== undefined ? { image_url } : {}),
            },
            select: { user_id: true, username: true, name: true, role: true, image_url: true }
        });

        res.json(updated);
    } catch (e) { handlePrismaError(e, res, next); }
}

/**
 * PUT /api/users/:id/username
 * ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô username (unique)
 */
export async function updateUsername(req, res, next) {
    try {
        const { username } = req.body;
        if (!username) return res.status(400).json({ error: 'username required' });

        const updated = await prisma.user.update({
            where: { user_id: req.params.id },
            data: { username },
            select: { user_id: true, username: true, name: true, role: true, image_url: true }
        });

        res.json(updated);
    } catch (e) { handlePrismaError(e, res, next); }
}

/**
 * PUT /api/users/:id/password
 * ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô 
 */
export async function updatePassword(req, res, next) {
    try {
        const { password } = req.body;
        if (!password) return res.status(400).json({ error: 'password required' });

        // üîë ‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ó‡∏µ‡πà‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç: HASH ‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà‡∏Å‡πà‡∏≠‡∏ô‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
        const newHashedPassword = await bcrypt.hash(password, 10);
        
        const updated = await prisma.user.update({
            where: { user_id: req.params.id },
            data: { password: newHashedPassword } // ‡πÉ‡∏ä‡πâ‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏ó‡∏µ‡πà Hash ‡πÅ‡∏•‡πâ‡∏ß
        });

        res.json({ user_id: updated.user_id, ok: true });
    } catch (e) { handlePrismaError(e, res, next); }
}

// DELETE /api/users/:id
export async function deleteUser(req, res, next) {
    try {
        const deleted = await prisma.user.delete({
            where: { user_id: req.params.id },
            select: { user_id: true, username: true, name: true, role: true, image_url: true }
        });
        res.json(deleted);
    } catch (e) { handlePrismaError(e, res, next); }
}
// üÜï POST /api/users/login
export async function loginUser(req, res, next) {
    try {
        const { username, password } = req.body;
        if (!username || !password) {
            return res.status(400).json({ error: 'Username and password are required' });
        }

        // 1. ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏à‡∏≤‡∏Å username
        const user = await prisma.user.findUnique({
            where: { username },
            // ‚ö†Ô∏è ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏•‡∏∑‡∏≠‡∏Å password ‡∏î‡πâ‡∏ß‡∏¢ ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡∏≥‡∏°‡∏≤‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö Hash
            select: { 
                user_id: true, 
                username: true, 
                name: true, 
                role: true,
                password: true // ‡∏ï‡πâ‡∏≠‡∏á‡∏î‡∏∂‡∏á Hash ‡∏°‡∏≤
            }
        });

        if (!user) {
            return res.status(401).json({ error: 'Username or password incorrect' });
        }

        // 2. ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô
        const isPasswordValid = await bcrypt.compare(password, user.password);

        if (!isPasswordValid) {
            return res.status(401).json({ error: 'Username or password incorrect' });
        }

        // 3. (Optional ‡πÅ‡∏ï‡πà‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥) ‡∏™‡∏£‡πâ‡∏≤‡∏á JWT Token ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡∏õ‡∏Å‡∏ï‡∏¥
        // üí° ‡∏ñ‡πâ‡∏≤‡∏Ñ‡∏∏‡∏ì‡πÉ‡∏ä‡πâ session, ‡πÉ‡∏´‡πâ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ req.session.user ‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ
        // üí° ‡∏ñ‡πâ‡∏≤‡∏Ñ‡∏∏‡∏ì‡πÉ‡∏ä‡πâ JWT, ‡πÉ‡∏´‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á token ‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ‡πÅ‡∏•‡∏∞‡∏™‡πà‡∏á‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ

        // ‡∏•‡∏ö password hash ‡∏≠‡∏≠‡∏Å‡∏Å‡πà‡∏≠‡∏ô‡∏™‡πà‡∏á‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ
        const { password: _, ...userWithoutPassword } = user; 
        
        // 4. ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏Å‡∏•‡∏±‡∏ö
        // (Frontend ‡∏à‡∏∞‡∏£‡∏±‡∏ö user object ‡∏ô‡∏µ‡πâ ‡πÅ‡∏•‡∏∞‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö role = '‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô')
        res.json({ 
            message: 'Login successful', 
            user: userWithoutPassword 
            // üí° ‡∏ñ‡πâ‡∏≤‡πÉ‡∏ä‡πâ JWT, ‡∏≠‡∏≤‡∏à‡∏™‡πà‡∏á‡πÄ‡∏õ‡πá‡∏ô { token: generatedToken, user: userWithoutPassword }
        });

    } catch (e) {
        console.error('Login error:', e);
        next(e);
    }
}