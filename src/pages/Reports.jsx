// src/pages/Reports.jsx
import { useMemo, useState, useEffect } from "react";
import { api } from "../lib/api";

/** ‡πÅ‡∏õ‡∏•‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡∏ö‡∏≤‡∏ó */
const THB = (n) =>
  (Number(n) || 0).toLocaleString("th-TH", {
    style: "currency",
    currency: "THB",
  });

/** ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà (YYYY-MM-DD) ‡∏ï‡∏≤‡∏°‡πÇ‡∏ã‡∏ô‡πÄ‡∏ß‡∏•‡∏≤‡πÑ‡∏ó‡∏¢ ‡∏à‡∏≤‡∏Å‡∏Ñ‡πà‡∏≤ Date/ISO/String */
function toBkkDateStr(dateLike) {
  if (!dateLike) return "";
  const d = new Date(dateLike);
  const bkk = new Date(d.toLocaleString("en-US", { timeZone: "Asia/Bangkok" }));
  const y = bkk.getFullYear();
  const m = String(bkk.getMonth() + 1).padStart(2, "0");
  const dd = String(bkk.getDate()).padStart(2, "0");
  return `${y}-${m}-${dd}`;
}

export default function Reports() {
  const [start, setStart] = useState(""); // YYYY-MM-DD
  const [end, setEnd] = useState("");     // YYYY-MM-DD
  const [cat, setCat] = useState("‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î");

  const [products, setProducts] = useState([]);
  const [sales, setSales] = useState([]);
  const [loading, setLoading] = useState(true);
  const [errMsg, setErrMsg] = useState("");

  // ‡πÇ‡∏´‡∏•‡∏î products + sales(with items)
  useEffect(() => {
    (async () => {
      try {
        setLoading(true);
        setErrMsg("");

        // üß™ debug: ‡∏î‡∏π‡∏ß‡πà‡∏≤ baseURL ‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏≠‡∏∞‡πÑ‡∏£ (‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏ß‡∏•‡∏≤ 404)
        console.log("[Reports] api.baseURL =", api.defaults.baseURL);

        const [prodRes, saleRes] = await Promise.all([
          api.get("/products"),          // ‚ûú ‡πÑ‡∏õ /api/products ‡∏ú‡πà‡∏≤‡∏ô Vite proxy
          api.get("/sales/with-items"),  // ‚ûú ‡πÑ‡∏õ /api/sales/with-items
        ]);

        setProducts(Array.isArray(prodRes.data) ? prodRes.data : []);
        setSales(Array.isArray(saleRes.data) ? saleRes.data : []);
      } catch (err) {
        console.error("‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß", err);
        // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡πâ‡∏ô ‡πÜ ‡∏ö‡∏ô UI ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏£‡∏π‡πâ‡∏ß‡πà‡∏≤‡πÑ‡∏õ‡πÑ‡∏°‡πà‡∏ñ‡∏∂‡∏á API
        setErrMsg(err?.response?.data?.message || err?.message || "‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß");
      } finally {
        setLoading(false);
      }
    })();
  }, []);

  // ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà (‡∏î‡∏∂‡∏á‡∏à‡∏≤‡∏Å products ‡∏Å‡πà‡∏≠‡∏ô ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡πà‡∏≠‡∏¢ fallback ‡∏à‡∏≤‡∏Å sales)
  const categories = useMemo(() => {
    const fromProducts = new Set(
      products.map((p) => p?.category?.category_name).filter(Boolean)
    );
    if (fromProducts.size > 0) return ["‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î", ...Array.from(fromProducts)];

    const fromSales = new Set(
      (sales || [])
        .flatMap((s) => s?.items || [])
        .map((it) => it?.product?.category?.category_name)
        .filter(Boolean)
    );
    return ["‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î", ...Array.from(fromSales)];
  }, [products, sales]);

  // ‡∏£‡∏ß‡∏°‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏£‡∏≤‡∏¢‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ (‡∏Å‡∏£‡∏≠‡∏á‡∏ä‡πà‡∏ß‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà + ‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà)
  const rows = useMemo(() => {
    const inRange = (createdAt) => {
      const d = toBkkDateStr(createdAt); // ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡∏≤‡∏°‡πÄ‡∏ß‡∏•‡∏≤‡πÑ‡∏ó‡∏¢
      if (start && d < start) return false;
      if (end && d > end) return false;
      return true;
    };

    const qtyByProduct = new Map();
    for (const sale of sales || []) {
      if (!inRange(sale?.created_at)) continue;
      for (const it of sale?.items || []) {
        const prod = it?.product;
        if (!prod) continue;

        const catName = prod?.category?.category_name;
        if (cat !== "‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î" && catName !== cat) continue;

        const q = Number(it?.qty ?? it?.quantity ?? 0); // ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏ó‡∏±‡πâ‡∏á qty/quantity
        qtyByProduct.set(prod.product_id, (qtyByProduct.get(prod.product_id) || 0) + q);
      }
    }

    return Array.from(qtyByProduct.entries())
      .map(([pid, qty]) => {
        // ‡∏´‡∏≤ product object (‡∏à‡∏≤‡∏Å sales ‡∏Å‡πà‡∏≠‡∏ô ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠‡∏Ñ‡πà‡∏≠‡∏¢‡∏î‡∏π‡πÉ‡∏ô products)
        const prodFromSales =
          (sales || [])
            .flatMap((s) => s?.items || [])
            .map((it) => it?.product)
            .find((p) => p?.product_id === pid) || null;

        const prod = prodFromSales || products.find((p) => p?.product_id === pid);
        if (!prod) return null;

        const total = qty * Number(prod?.sell_price || 0);
        const cost = qty * Number(prod?.cost_price || 0);
        const profit = total - cost;

        return {
          id: pid,
          name: prod?.product_name,
          category: prod?.category?.category_name || "-",
          qty,
          total,
          cost,
          profit,
        };
      })
      .filter(Boolean)
      .sort((a, b) => a.id.localeCompare(b.id));
  }, [start, end, cat, sales, products]);

  // ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏£‡∏ß‡∏°
  const summary = useMemo(() => {
    const totalSales = rows.reduce((s, r) => s + r.total, 0);
    const totalProfit = rows.reduce((s, r) => s + r.profit, 0);

    const orderCount = (sales || []).filter((o) => {
      const d = toBkkDateStr(o?.created_at);
      const okDate = (!start || d >= start) && (!end || d <= end);
      if (!okDate) return false;
      if (cat === "‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î") return true;
      return (o?.items || []).some((it) => it?.product?.category?.category_name === cat);
    }).length;

    return { totalSales, orderCount, totalProfit };
  }, [rows, start, end, cat, sales]);

  const resetFilters = () => {
    setStart("");
    setEnd("");
    setCat("‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î");
  };

  return (
    <div className="min-h-screen  p-6">
      <div className="max-w-5xl mx-auto space-y-4">
        <h1 className="text-2xl font-extrabold mb-4">‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏Ç‡∏≤‡∏¢‡∏´‡∏ô‡πâ‡∏≤‡∏£‡πâ‡∏≤‡∏ô</h1>
        {/* ‡∏ü‡∏¥‡∏•‡πÄ‡∏ï‡∏≠‡∏£‡πå */}
        <div className="bg-white rounded-2xl ring-1 ring-black/10 p-4">
          <h2 className="font-bold mb-3">‡∏ï‡∏±‡∏ß‡∏Å‡∏£‡∏≠‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô</h2>
          <div className="grid grid-cols-1 sm:grid-cols-4 gap-3">
            <div>
              <label className="text-sm text-gray-600">‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô</label>
              <input
                type="date"
                value={start}
                onChange={(e) => setStart(e.target.value)}
                className="w-full h-11 mt-1 px-3 border rounded-lg bg-white outline-none focus:ring-2 focus:ring-indigo-500"
              />
            </div>
            <div>
              <label className="text-sm text-gray-600">‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î</label>
              <input
                type="date"
                value={end}
                onChange={(e) => setEnd(e.target.value)}
                className="w-full h-11 mt-1 px-3 border rounded-lg bg-white outline-none focus:ring-2 focus:ring-indigo-500"
              />
            </div>
            <div>
              <label className="text-sm text-gray-600">‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤</label>
              <select
                value={cat}
                onChange={(e) => setCat(e.target.value)}
                className="w-full h-11 mt-1 px-3 border rounded-lg bg-white outline-none focus:ring-2 focus:ring-indigo-500"
              >
                {categories.map((c) => (
                  <option key={c} value={c}>
                    {c}
                  </option>
                ))}
              </select>
            </div>
            <div className="flex items-end">
              <button
                onClick={resetFilters}
                className="h-11 w-full rounded-lg bg-gray-200 hover:bg-gray-300 font-semibold"
              >
                ‡∏•‡πâ‡∏≤‡∏á‡∏ï‡∏±‡∏ß‡∏Å‡∏£‡∏≠‡∏á
              </button>
            </div>
          </div>

          {/* ‡πÅ‡∏à‡πâ‡∏á error ‡∏ä‡∏±‡∏î ‡πÜ ‡∏ñ‡πâ‡∏≤‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à */}
          {errMsg && (
            <div className="mt-3 text-sm text-red-600">
              ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: {errMsg}
            </div>
          )}
        </div>

        {/* ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏™‡∏ï‡πá‡∏≠‡∏Å */}
        <div className="bg-white rounded-2xl ring-1 ring-black/10 overflow-hidden">
          <div className="px-4 pt-4 pb-2 font-bold">‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏™‡∏ï‡πá‡∏≠‡∏Å</div>
          <div className="px-4 pb-4">
            <div className="rounded-xl overflow-hidden border border-black/10">
              <table className="w-full text-sm">
                <thead>
                  <tr className="bg-[#C80036] text-white">
                    <th className="px-4 py-3 text-left">‡∏£‡∏´‡∏±‡∏™‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤</th>
                    <th className="px-4 py-3 text-left">‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤</th>
                    <th className="px-4 py-3 text-right">‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏Ç‡∏≤‡∏¢</th>
                    <th className="px-4 py-3 text-right">‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏° (‡∏ö‡∏≤‡∏ó)</th>
                  </tr>
                </thead>
                <tbody>
                  {loading ? (
                    <tr>
                      <td colSpan={4} className="px-4 py-8 text-center text-gray-500">
                        ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‚Ä¶
                      </td>
                    </tr>
                  ) : rows.length ? (
                    rows.map((r) => (
                      <tr key={r.id} className="odd:bg-white even:bg-gray-50">
                        <td className="px-4 py-3">{r.id}</td>
                        <td className="px-4 py-3">{r.name}</td>
                        <td className="px-4 py-3 text-right">{r.qty}</td>
                        <td className="px-4 py-3 text-right">{THB(r.total)}</td>
                      </tr>
                    ))
                  ) : (
                    <tr>
                      <td colSpan={4} className="px-4 py-8 text-center text-gray-500">
                        ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
                      </td>
                    </tr>
                  )}
                </tbody>
              </table>
            </div>
          </div>
        </div>

        {/* ‡∏Å‡∏≤‡∏£‡πå‡∏î‡∏™‡∏£‡∏∏‡∏õ */}
        <div className="bg-white rounded-2xl ring-1 ring-black/10 p-4">
          <div className="font-bold mb-3">‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ</div>
          <div className="grid grid-cols-1 sm:grid-cols-3 gap-3">
            <StatCard label="‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏£‡∏ß‡∏°" value={THB(summary.totalSales)} bg="bg-emerald-100" />
            <StatCard label="‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏≠‡∏≠‡∏£‡πå‡πÄ‡∏î‡∏≠‡∏£‡πå" value={`${summary.orderCount} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`} bg="bg-sky-100" />
            <StatCard label="‡∏Å‡∏≥‡πÑ‡∏£‡∏™‡∏∏‡∏ó‡∏ò‡∏¥" value={THB(summary.totalProfit)} bg="bg-pink-100" />
          </div>
        </div>
      </div>
    </div>
  );
}

function StatCard({ label, value, bg }) {
  return (
    <div className={`rounded-xl ${bg} p-4 ring-1 ring-black/10`}>
      <div className="text-gray-700">{label}</div>
      <div className="text-xl font-extrabold mt-1">{value}</div>
    </div>
  );
}
